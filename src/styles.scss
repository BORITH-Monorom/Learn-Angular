
// // Custom Theming for Angular Material
// // For more information: https://material.angular.io/guide/theming
// @use "@angular/material" as mat;
// // Plus imports for other components in your app.

// // Include the common styles for Angular Material. We include this here so that you only
// // have to load a single css file for Angular Material in your app.
// // Be sure that you only ever include this mixin once!
// @include mat.core();

// // Define the palettes for your theme using the Material Design palettes available in palette.scss
// // (imported above). For each palette, you can optionally specify a default, lighter, and darker
// // hue. Available color palettes: https://material.io/design/color/
// $Learn_Angular-primary: mat.define-palette(mat.$indigo-palette);
// $Learn_Angular-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// // The warn palette is optional (defaults to red).
// $Learn_Angular-warn: mat.define-palette(mat.$red-palette);

// // Create the theme object. A theme consists of configurations for individual
// // theming systems such as "color" or "typography".
// $Learn_Angular-theme: mat.define-light-theme(
//   (
//     color: (
//       primary: $Learn_Angular-primary,
//       accent: $Learn_Angular-accent,
//       warn: $Learn_Angular-warn,
//     ),
//   )
// );

// // Include theme styles for core and each component used in your app.
// // Alternatively, you can import and @include the theme mixins for each component
// // that you are using.
// @include mat.all-component-themes($Learn_Angular-theme);

@use "@angular/material" as mat;
@use './custom-theme.scss' as custom-theme;
@include mat.core();
@include mat.all-component-themes(custom-theme.$app-theme);
@import "/node_modules/flag-icons/css/flag-icons.min.css";
@import url("https://fonts.googleapis.com/css2?family=Noto+Sans+Khmer&display=swap");
@import "./app/styles/variables.scss";


@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

html,
body {
  height: 100%;
}
* {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
  font-family: "Noto Sans Khmer", sans-serif;
}
p {
  font-size: 18px;
}

:root {
  --light-effect: hsl(190, 100%, 60%);
  --button-color: #20c9f9;
  --text-color: #fff;
}
.active{
  background-color: #199FC5 !important;
  box-shadow: inset 1px 1px 5px rgba(0,0,0,0.4);
}
.active_menu{
  border-bottom: 2px solid #19c9f9 !important;
}
.hj-container{
  max-width: $container-w;
  margin: 0 auto;
}
.hj-container-full{
  width: $container-fw;
}
.hj-card{
  box-shadow: $card-shadow-white;
  border-radius: $card-border-radius;
}
.hj-same-section-padding{
  padding: 0 15px 20px 15px;
}


.flex{
  display: flex;
}
app-name-nav {
  .toolbar {
    background-color: #3f51b5 !important;
    color: white;
    font-weight: bold;
    font-size: 20px;
  }
  mat-expansion-panel {
    box-shadow: none !important;
  }
}

app-contact-us{
  .active_details{
  .mdc-tab-indicator--active{
    display: none;
  }
 .mat-mdc-tab-labels{
    display: none;
  }
  }

}
.batch-flex-center{
  display: flex !important;

}
.batch-btn {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 5px;

  .mat-mdc-button {
    padding: 10px 15px;
    border-radius: 999px;
    background-color: #20c9f9;
    color: white !important;
  }
}

.batch-btn-transparent{
  display:flex;
  justify-content: center;
  align-items:center;
  margin: 0 5px;
  .mat-mdc-button{
    padding: 10px 15px;
    border-radius: 999px;
    border: 1px solid #555;
  }
}



app-mat-dropdown{
  .mat-pseudo-checkbox {
    display: none;
  }

  .hj-multi-items-select {
    .mat-mdc-form-field-flex {
      height: unset !important;
    }
  }

}



//animation effects
.btn_content {
  position: relative !important;
  overflow: hidden !important;

  .btn_text,
  .mat-icon {
    position: relative;
    z-index: 10 !important;
  }

  .btn_eff {
    z-index: 0 !important;
    width: 50px;
    height: 150px;
    inset: 0;
    position: absolute;
    margin: auto;
    filter: blur(10px);
    background-color: var(--light-effect) !important;
    transform: rotate(30deg);
    animation: effect 3s ease-in-out infinite !important;
  }

  /* Animate*/
}
@keyframes effect {
  0% {
    background-color: --light-effect;
    left: -200px;
    right: 800px;
  }
  100% {
    background-color: --light-effect;
    left: 800px;
    right: -200px;
  }
}


